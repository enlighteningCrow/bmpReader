"set runtimepath^=~/.vim runtimepath+=~/.vim/after
"let &packpath=&runtimepath


"source /home/twistingcamel/programs/themes/neovim/vim-afterglow/colors/afterglow.vim


" source ~/.vimrc

" map <C-> <Nop>
" imap jj <Esc>
" nmap [ 0
" nmap ] $
" nmap \ :tabn<CR>
" nmap \| :tabp<CR>

" let mapleader = " "
" 
" nmap <Esc>j :m .+1<CR>==
" nmap <Esc>k :m .-2<CR>==
" imap <Esc>j <Esc>:m .+1<CR>==gi
" imap <Esc>k <Esc>:m .-2<CR>==gi
" vmap <Esc>j :m '>+1<CR>gv=gv
" vmap <Esc>k :m '<-2<CR>gv=gv

" let cursors_count = 0





"set/usr/bin/fzf




" from the old .vimrc: 


"STARTOF vim-plug"


" Specify a directory for plugins
" - For Neovim: stdpath('data') . '/plugged'
" - Avoid using standard Vim directory names like 'plugin'
call plug#begin('~/.vim/plugged')

" Make sure you use single quotes

" Shorthand notation; fetches https://github.com/junegunn/vim-easy-align
Plug 'junegunn/vim-easy-align'

" Any valid git URL is allowed
Plug 'https://github.com/junegunn/vim-github-dashboard.git'

" Multiple Plug commands can be written in a single line using | separators
Plug 'SirVer/ultisnips' | Plug 'honza/vim-snippets'

" On-demand loading
Plug 'scrooloose/nerdtree', { 'on':  'NERDTreeToggle' }
Plug 'tpope/vim-fireplace', { 'for': 'clojure' }

" Using a non-default branch
Plug 'rdnetto/YCM-Generator', { 'branch': 'stable' }

" Using a tagged release; wildcard allowed (requires git 1.9.2 or above)
Plug 'fatih/vim-go', { 'tag': '*' }

" Plugin options
Plug 'nsf/gocode', { 'tag': 'v.20150303', 'rtp': 'vim' }

" Plugin outside ~/.vim/plugged with post-update hook
Plug 'junegunn/fzf', { 'dir': '~/.fzf', 'do': './install --all' }

" Unmanaged plugin (manually installed and updated)
Plug '~/my-prototype-plugin'

Plug 'tpope/vim-fugitive'
Plug 'wincent/command-t'
Plug 'tpope/vim-rhubarb'
Plug 'svermeulen/vim-yoink'
Plug 'svermeulen/vim-cutlass'
Plug 'svermeulen/vim-subversive'
"Plug 'bfrg/vim-cpp-modern'
Plug 'jiangmiao/auto-pairs'
Plug 'sbdchd/neoformat'
Plug 'davidhalter/jedi-vim'
Plug 'neomake/neomake'
Plug 'machakann/vim-highlightedyank'
Plug 'tmhedberg/SimpylFold'
Plug 'bluz71/vim-moonfly-colors'
Plug '/home/twistingcamel/programs/themes/neovim/vim-afterglow'
Plug 'junegunn/fzf'
Plug 'junegunn/fzf.vim'
Plug 'sharkdp/bat'
Plug 'dandavison/delta'
Plug 'ggreer/the_silver_searcher'
Plug 'BurntSushi/ripgrep'
Plug 'mbbill/undotree'
Plug 'voldikss/vim-floaterm'
Plug 'puremourning/vimspector'
Plug 'tpope/vim-unimpaired'
Plug 'cdelledonne/vim-cmake'
Plug 'kyazdani42/nvim-web-devicons'
Plug 'sheerun/vim-polyglot'
Plug 'tpope/vim-surround'
Plug 'scrooloose/nerdtree'
Plug 'scrooloose/syntastic'
Plug 'airblade/vim-gitgutter'
Plug 'vim-airline/vim-airline'
Plug 'scrooloose/nerdcommenter'
Plug 'altercation/vim-colors-solarized'
Plug 'majutsushi/tagbar'
Plug 'vim-airline/vim-airline-themes'
" Plug 'neoclide/coc.nvim', {'branch': 'release'}
Plug 'universal-ctags/ctags'
Plug 'nanotech/jellybeans.vim'
" Plug 'neoclide/coc.nvim', {'branch': 'master', 'do': 'yarn install --frozen-lockfile'}
Plug 'jackguo380/vim-lsp-cxx-highlight'
Plug 'phpactor/phpactor'
Plug 'mfussenegger/nvim-dap'

Plug '/home/twistingcamel/.vim/plugged/coc.nvim'

" STARTOF Coc extensions:
" ENDOF Coc extensions:



" Initialize plugin system
call plug#end()

"ENDOF vim-plug



function! ___thisIsTheRemnantsFromTheVundlePlugin()

        set nocompatible              " be iMproved, required
        filetype off                  " required

        " set the runtime path to include Vundle and initialize
        set rtp+=~/.vim/bundle/Vundle.vim
        call vundle#begin()
        " alternatively, pass a path where Vundle should install plugins
        "call vundle#begin('~/some/path/here')

        " let Vundle manage Vundle, required
        Plugin 'VundleVim/Vundle.vim'

        " The following are examples of different formats supported.
        " Keep Plugin commands between vundle#begin/end.
        " plugin on GitHub repo
        Plugin 'tpope/vim-fugitive'
        " plugin from http://vim-scripts.org/vim/scripts.html
        " Plugin 'L9'
        " Git plugin not hosted on GitHub
        " Plugin 'git://git.wincent.com/command-t.git'
        Plugin 'wincent/command-t'
        " git repos on your local machine (i.e. when working on your own plugin)
        " Plugin 'file:///home/gmarik/path/to/plugin'
        " The sparkup vim script is in a subdirectory of this repo called vim.
        " Pass the path to set the runtimepath properly.
        " Plugin 'rstacruz/sparkup', {'rtp': 'vim/'}
        " Install L9 and avoid a Naming conflict if you've already installed a
        " different version somewhere else.
        " Plugin 'ascenator/L9', {'name': 'newL9'}

        Plugin 'tpope/vim-rhubarb'

        Plugin 'svermeulen/vim-yoink'
        Plugin 'svermeulen/vim-cutlass'
        Plugin 'svermeulen/vim-subversive'


        "Plugin 'octol/vim-cpp-enhanced-highlight'
        Plugin 'bfrg/vim-cpp-modern'
        "Plugin 'terryma/vim-multiple-cursors'
        " Plugin 'drinks5/nvim-yapf-formater'
        Plugin 'jiangmiao/auto-pairs'
        " Plugin 'scrooloose/nerdcommenter'
        Plugin 'sbdchd/neoformat'
        Plugin 'davidhalter/jedi-vim'
        Plugin 'neomake/neomake'
        Plugin 'machakann/vim-highlightedyank'
        Plugin 'tmhedberg/SimpylFold'
        Plugin 'bluz71/vim-moonfly-colors'
        " Plugin 'lifepillar/vim-colortemplate'

        Plugin 'file:///home/twistingcamel/programs/themes/neovim/vim-afterglow'
        Plugin 'junegunn/fzf'
        Plugin 'junegunn/fzf.vim'
        "set rtp+=/usr/local/fzf
        "Plugin 'file:///usr/bin/fzf'
        Plugin 'sharkdp/bat'
        Plugin 'dandavison/delta'
        Plugin 'ggreer/the_silver_searcher'
        Plugin 'BurntSushi/ripgrep'
        Plugin 'mbbill/undotree'
        Plugin 'voldikss/vim-floaterm'
        Plugin 'puremourning/vimspector'
        Plugin 'tpope/vim-unimpaired'
        "Plugin 'rdnetto/YCM-Generator'
        "Plugin 'xavierd/clang_complete'
        Plugin 'cdelledonne/vim-cmake'

        Plugin 'kyazdani42/nvim-web-devicons'
        "Plugin 'romgrk/barbar.nvim'


        " Plugin 'scrooloose/nerdtree'
        " Plugin 'numirias/semshi'
         Plugin 'sheerun/vim-polyglot'
        " Plugin 'flazz/vim-colorschemes'

        Plugin 'tpope/vim-surround'
        Plugin 'scrooloose/nerdtree'
        Plugin 'scrooloose/syntastic'
        Plugin 'airblade/vim-gitgutter'
        Plugin 'vim-airline/vim-airline'
        " Plugin 'vim-airline/vim-airline-themes'
        Plugin 'scrooloose/nerdcommenter'
        Plugin 'altercation/vim-colors-solarized'
        Plugin 'majutsushi/tagbar'
        Plugin 'vim-airline/vim-airline-themes'
        "Plugin 'valloric/youcompleteme'
        Plugin 'neoclide/coc.nvim'

        "Plugin 'sakhnik/nvim-gdb'
        "Plugin 'kiteco/vim-plugin'
        Plugin 'universal-ctags/ctags'
        " Plugin 'mg979/vim-visual-multi'

        Plugin 'nanotech/jellybeans.vim'

        " All of your Plugins must be added before the following line
        call vundle#end()            " required
        filetype plugin indent on    " required
        " To ignore plugin indent changes, instead use:
        "filetype plugin on
        "
        " Brief help
        " :PluginList       - lists configured plugins
        " :PluginInstall    - installs plugins; append `!` to update or just :PluginUpdate
        " :PluginSearch foo - searches for foo; append `!` to refresh local cache
        " :PluginClean      - confirms removal of unused plugins; append `!` to auto-approve removal
        "
        " see :h vundle for more details or wiki for FAQ
        " Put your non-Plugin stuff after this line

endfunction




" map <C-k> <Nop>
let mapleader = " "
imap jj <Esc>
map t <C-r>
map [ 0
map ] $
map \ :tabn<CR>
map \| :tabp<CR>
" nnoremap s ge
noremap <leader>q <C-x>
noremap <leader>e <C-a>
" noremap <leader>s :w<CR>:Neoformat<CR>
" noremap :w<CR> :w<CR>:Neoformat<CR>
" nmap :w<CR> :w<CR>:Neoformat<CR>
map <leader>\ :Neoformat<CR>
map <leader>/ <leader>c<space>
map <leader>? <leader>cm

" noremap : :<C-f>i

"<C-CR>
nmap <S-CR> [<Space>
nmap <C-CR> ]<Space>
imap <S-CR> <Esc>[<Space>a
imap <C-CR> <Esc>]<Space>a
" nmap <leader>/ <leader>cc
" nmap <leader>? <leader>cu
"
"
"
"map <leader>dp :GdbStartPDB python -m pdb %<CR>
"map <leader>dd :GdbStart gdb -q a.out
"
map <leader>" :NERDTreeToggle<CR>
map <leader>' :FloatermToggle<CR>


nnoremap <C-c> "*yy
inoremap <C-c> <Esc>"*yya
nnoremap <C-x> "*dd
inoremap <C-x> <Esc>"*dda
vnoremap <C-c> "*y
vnoremap <C-x> "*yy
inoremap <C-v> <Esc>"*pa
noremap <C-v> "*p

"noremap y ""y
"noremap d ""d
"noremap p ""p

"nnoremap <C-e> <C-e>
"nnoremap <C-y> <C-y>
noremap <C-e> 10<C-e>
noremap <C-y> 10<C-y>
"nmap <leader>" :N


" Move to previous/next
nnoremap <silent>    <leader>[ :BufferPrevious<CR>
nnoremap <silent>    <leader>] :BufferNext<CR>
" Re-order to previous/next
nnoremap <silent>    <leader>mp :BufferMovePrevious<CR>
nnoremap <silent>    <leader>mn :BufferMoveNext<CR>
" Goto buffer in position...
nnoremap <silent>    <leader>b1 :BufferGoto 1<CR>
nnoremap <silent>    <leader>b2 :BufferGoto 2<CR>
nnoremap <silent>    <leader>b3 :BufferGoto 3<CR>
nnoremap <silent>    <leader>b4 :BufferGoto 4<CR>
nnoremap <silent>    <leader>b5 :BufferGoto 5<CR>
nnoremap <silent>    <leader>b6 :BufferGoto 6<CR>
nnoremap <silent>    <leader>b7 :BufferGoto 7<CR>
nnoremap <silent>    <leader>b8 :BufferGoto 8<CR>
nnoremap <silent>    <leader>b9 :BufferLast<CR>
" Pin/unpin buffer
nnoremap <silent>    <leader>bp :BufferPin<CR>
" Close buffer
nnoremap <silent>    <leader>bc :BufferClose<CR>
" Wipeout buffer
"                          :BufferWipeout<CR>
" Close commands
"                          :BufferCloseAllButCurrent<CR>
"                          :BufferCloseAllButPinned<CR>
"                          :BufferCloseBuffersLeft<CR>
"                          :BufferCloseBuffersRight<CR>
" Magic buffer-picking mode
nnoremap <silent> <C-s>    :BufferPick<CR>
" Sort automatically by...
nnoremap <silent> <Space>bb :BufferOrderByBufferNumber<CR>
nnoremap <silent> <Space>bd :BufferOrderByDirectory<CR>
nnoremap <silent> <Space>bl :BufferOrderByLanguage<CR>
nnoremap <silent> <Space>bw :BufferOrderByWindowNumber<CR>

noremap s ge
noremap S gE


nmap <c-p> <plug>(YoinkPostPasteSwapBack)
nmap <c-n> <plug>(YoinkPostPasteSwapForward)

nmap p <plug>(YoinkPaste_p)
nmap P <plug>(YoinkPaste_P)

" Also replace the default gp with yoink paste so we can toggle paste in this case too
nmap gp <plug>(YoinkPaste_gp)
nmap gP <plug>(YoinkPaste_gP)

let g:yoinkIncludeDeleteOperations = 1
nnoremap d d
xnoremap d d
nnoremap dd dd
nnoremap D D

"nnoremap <F2> :YcmCompleter 

" Other:
" :BarbarEnable - enables barbar (enabled by default)
" :BarbarDisable - very bad command, should never be used

" nmap <leader>\'
" tmap jj <C-\><C-n>
" nmap <leader>e <C-a>
" nmap <leader>e <C-a>
" nmap <leader>e <C-a>
" nmap <leader>e <C-a>
" nmap <F8> :GdbBreakpointToggle<Cr>
" nmap <F4> :GdbUntil<Cr>
" nmap <F5> :GdbContinue<Cr>
" nmap <F10> :GdbNext<Cr>
" nmap <F11> :GdbStep<Cr>
" nmap <F12> :GdbFinish<Cr>
" nmap <C-p> :GdbFrameUp<Cr>
" nmap <C-n> :GdbFrameDown<Cr>

" let mapleader = " "

nmap <M-j> :m .+1<CR>==
nmap <M-k> :m .-2<CR>==
imap <M-j> <Esc>:m .+1<CR>==gi
imap <M-k> <Esc>:m .-2<CR>==gi
vmap <M-j> :m '>+1<CR>gv=gv
vmap <M-k> :m '<-2<CR>gv=gv

let g:kite_supported_languages = ['python']

map <F9> :TagbarToggle<CR>

let g:kite_tab_complete=1
set completeopt+=menuone
set completeopt+=noselect
set completeopt+=noinsert
set completeopt+=preview

autocmd CompleteDone * if !pumvisible() | pclose | endif
set belloff+=ctrlg

let g:kite_previous_placeholder = '<C-H>'
let g:kite_next_placeholder = '<C-L>'



"let g:ycm_key_list_stop_completion = ['<C-y>', '<tab>']

let g:ycm_global_ycm_extra_conf = "~/.vim/bundle/.ycm_extra_conf.py"
"let g:ycm_global_ycm_extra_conf = '~/.vim/.ycm_extra_conf.py'

let g:ycm_auto_trigger = 1

let g:ycm_semantic_triggers =  { 'VimspectorPrompt': [ '.', '->', ':', '<' ],
  \   'cpp': [ 're!.' ],
  \   'c++': [ 're!.' ]
  \ }



" disable autocompletion, because we use deoplete for completion
let g:jedi#completions_enabled = 0

" open the go-to function in split, not another buffer
let g:jedi#use_splits_not_buffers = "right"

let g:neomake_python_enabled_makers = ['pylint']

call neomake#configure#automake('nrwi', 500)

hi HighlightedyankRegion cterm=reverse gui=reverse

" set highlight duration time to 1000 ms, i.e., 1 second
let g:highlightedyank_highlight_duration = 1000

let g:vimspector_enable_mappings = 'HUMAN'

let g:clang_library_path = '/lib/x86_64-linux-gnu/libclang-12.so.1'

" mnemonic 'di' = 'debug inspect' (pick your own, if you prefer!)

" for normal mode - the word under the cursor
nmap <Leader>di <Plug>VimspectorBalloonEval
" for visual mode, the visually selected text
xmap <Leader>di <Plug>VimspectorBalloonEval

":NERDTreeToggle

"set title
"set titlestring=%{hostname()}\ \ %F\ \ %{strftime('%Y-%m-%d\ %H:%M',getftime(expand('%')))}


" let g:kite_documentation_continual=1

" let cursors_count = 0

":colorscheme murphy
":colorscheme afterglow

" set guifont=Consolas:h12
set guifont=Cascadia\ Mono:h12
let NERDTreeShowHidden=1

" /from ~.vimrc

let g:clang_debug=1



let g:jellybeans_overrides = {
\    'Todo': { 'guifg': '303030', 'guibg': 'f0f000',
\              'ctermfg': 'Black', 'ctermbg': 'Yellow',
\              'attr': 'bold' },
\    'Comment': { 'guifg': '00ff00' },
\    'background': { 'guibg': '000000', 'ctermbg': 'ffffff' },
\}

colorscheme jellybeans

"STARTOF coc

" Set internal encoding of vim, not needed on neovim, since coc.nvim using some
" unicode characters in the file autoload/float.vim
set encoding=utf-8

" TextEdit might fail if hidden is not set.
set hidden

" Some servers have issues with backup files, see #649.
set nobackup
set nowritebackup

" Give more space for displaying messages.
set cmdheight=2

" Having longer updatetime (default is 4000 ms = 4 s) leads to noticeable
" delays and poor user experience.
set updatetime=300

" Don't pass messages to |ins-completion-menu|.
set shortmess+=c

" Always show the signcolumn, otherwise it would shift the text each time
" diagnostics appear/become resolved.
if has("nvim-0.5.0") || has("patch-8.1.1564")
  " Recently vim can merge signcolumn and number column into one
  set signcolumn=number
else
  set signcolumn=yes
endif

" Use tab for trigger completion with characters ahead and navigate.
" NOTE: Use command ':verbose imap <tab>' to make sure tab is not mapped by
" other plugin before putting this into your config.
inoremap <silent><expr> <TAB>
      \ pumvisible() ? "\<C-n>" :
      \ <SID>check_back_space() ? "\<TAB>" :
      \ coc#refresh()
inoremap <expr><S-TAB> pumvisible() ? "\<C-p>" : "\<C-h>"

function! s:check_back_space() abort
  let col = col('.') - 1
  return !col || getline('.')[col - 1]  =~# '\s'
endfunction

" Use <c-space> to trigger completion.
if has('nvim')
  inoremap <silent><expr> <c-space> coc#refresh()
else
  inoremap <silent><expr> <c-@> coc#refresh()
endif

" Make <CR> auto-select the first completion item and notify coc.nvim to
" format on enter, <cr> could be remapped by other vim plugin
inoremap <silent><expr> <cr> pumvisible() ? coc#_select_confirm()
                              \: "\<C-g>u\<CR>\<c-r>=coc#on_enter()\<CR>"

" Use `[g` and `]g` to navigate diagnostics
" Use `:CocDiagnostics` to get all diagnostics of current buffer in location list.
nmap <silent> [g <Plug>(coc-diagnostic-prev)
nmap <silent> ]g <Plug>(coc-diagnostic-next)

" GoTo code navigation.
nmap <silent> gd <Plug>(coc-definition)
nmap <silent> gy <Plug>(coc-type-definition)
nmap <silent> gi <Plug>(coc-implementation)
nmap <silent> gr <Plug>(coc-references)

" Use K to show documentation in preview window.
nnoremap <silent> K :call <SID>show_documentation()<CR>

function! s:show_documentation()
  if (index(['vim','help'], &filetype) >= 0)
    execute 'h '.expand('<cword>')
  elseif (coc#rpc#ready())
    call CocActionAsync('doHover')
  else
    execute '!' . &keywordprg . " " . expand('<cword>')
  endif
endfunction

" Highlight the symbol and its references when holding the cursor.
autocmd CursorHold * silent call CocActionAsync('highlight')

" Symbol renaming.
nmap <leader>rn <Plug>(coc-rename)

" Formatting selected code.
xmap <leader>f  <Plug>(coc-format-selected)
nmap <leader>f  <Plug>(coc-format-selected)

augroup mygroup
  autocmd!
  " Setup formatexpr specified filetype(s).
  autocmd FileType typescript,json setl formatexpr=CocAction('formatSelected')
  " Update signature help on jump placeholder.
  autocmd User CocJumpPlaceholder call CocActionAsync('showSignatureHelp')
augroup end

" Applying codeAction to the selected region.
" Example: `<leader>aap` for current paragraph
xmap <leader>a  <Plug>(coc-codeaction-selected)
nmap <leader>a  <Plug>(coc-codeaction-selected)

" Remap keys for applying codeAction to the current buffer.
nmap <leader>ac  <Plug>(coc-codeaction)
" Apply AutoFix to problem on the current line.
nmap <leader>qf  <Plug>(coc-fix-current)

" Map function and class text objects
" NOTE: Requires 'textDocument.documentSymbol' support from the language server.
xmap if <Plug>(coc-funcobj-i)
omap if <Plug>(coc-funcobj-i)
xmap af <Plug>(coc-funcobj-a)
omap af <Plug>(coc-funcobj-a)
xmap ic <Plug>(coc-classobj-i)
omap ic <Plug>(coc-classobj-i)
xmap ac <Plug>(coc-classobj-a)
omap ac <Plug>(coc-classobj-a)

" Remap <C-f> and <C-b> for scroll float windows/popups.
if has('nvim-0.4.0') || has('patch-8.2.0750')
  nnoremap <silent><nowait><expr> <C-f> coc#float#has_scroll() ? coc#float#scroll(1) : "\<C-f>"
  nnoremap <silent><nowait><expr> <C-b> coc#float#has_scroll() ? coc#float#scroll(0) : "\<C-b>"
  inoremap <silent><nowait><expr> <C-f> coc#float#has_scroll() ? "\<c-r>=coc#float#scroll(1)\<cr>" : "\<Right>"
  inoremap <silent><nowait><expr> <C-b> coc#float#has_scroll() ? "\<c-r>=coc#float#scroll(0)\<cr>" : "\<Left>"
  vnoremap <silent><nowait><expr> <C-f> coc#float#has_scroll() ? coc#float#scroll(1) : "\<C-f>"
  vnoremap <silent><nowait><expr> <C-b> coc#float#has_scroll() ? coc#float#scroll(0) : "\<C-b>"
endif

" Use CTRL-S for selections ranges.
" Requires 'textDocument/selectionRange' support of language server.
nmap <silent> <C-s> <Plug>(coc-range-select)
xmap <silent> <C-s> <Plug>(coc-range-select)

" Add `:Format` command to format current buffer.
command! -nargs=0 Format :call CocAction('format')

" Add `:Fold` command to fold current buffer.
command! -nargs=? Fold :call     CocAction('fold', <f-args>)

" Add `:OR` command for organize imports of the current buffer.
command! -nargs=0 OR   :call     CocAction('runCommand', 'editor.action.organizeImport')

" Add (Neo)Vim's native statusline support.
" NOTE: Please see `:h coc-status` for integrations with external plugins that
" provide custom statusline: lightline.vim, vim-airline.
set statusline^=%{coc#status()}%{get(b:,'coc_current_function','')}

" Mappings for CoCList
" Show all diagnostics.
nnoremap <silent><nowait> <space>a  :<C-u>CocList diagnostics<cr>
" Manage extensions.
nnoremap <silent><nowait> <space>e  :<C-u>CocList extensions<cr>
" Show commands.
nnoremap <silent><nowait> <space>c  :<C-u>CocList commands<cr>
" Find symbol of current document.
nnoremap <silent><nowait> <space>o  :<C-u>CocList outline<cr>
" Search workspace symbols.
nnoremap <silent><nowait> <space>s  :<C-u>CocList -I symbols<cr>
" Do default action for next item.
nnoremap <silent><nowait> <space>j  :<C-u>CocNext<CR>
" Do default action for previous item.
nnoremap <silent><nowait> <space>k  :<C-u>CocPrev<CR>
" Resume latest coc list.
nnoremap <silent><nowait> <space>p  :<C-u>CocListResume<CR>

"ENDOF coc


" Triger `autoread` when files changes on disk
" https://unix.stackexchange.com/questions/149209/refresh-changed-content-of-file-opened-in-vim/383044#383044
" https://vi.stackexchange.com/questions/13692/prevent-focusgained-autocmd-running-in-command-line-editing-mode

let g:neoformat_cpp_clangformat = {
            \ 'exe': 'clang-format-12',
            \ 'replace': 0,
            \ 'stdin': 1,
            \ 'valid_exit_codes': [0, 23],
            \ 'no_append': 1,
            \ }
let g:neoformat_python_yapf = {
            \ 'exe': 'yapf',
            \ 'args': ['-s 4', '-E'],
            \ 'replace': 0,
            \ 'stdin': 0,
            \ 'env': ["DEBUG=1"],
            \ 'valid_exit_codes': [0, 23],
            \ 'no_append': 1,
            \ }

let g:neoformat_enabled_python = ['yapf']
let g:neoformat_enabled_python = ['clangformat']
    autocmd FocusGained,BufEnter,CursorHold,CursorHoldI *
            \ if mode() !~ '\v(c|r.?|!|t)' && getcmdwintype() == '' | checktime | endif

" Notification after file change
" https://vi.stackexchange.com/questions/13091/autocmd-event-for-autoread
autocmd FileChangedShellPost *
  \ echohl WarningMsg | echo "File changed on disk. Buffer reloaded." | echohl None


" use <tab> for trigger completion and navigate to the next complete item
function! s:check_back_space() abort
  let col = col('.') - 1
  return !col || getline('.')[col - 1]  =~ '\s'
endfunction

inoremap <silent><expr> <Tab>
      \ pumvisible() ? "\<C-n>" :
      \ <SID>check_back_space() ? "\<Tab>" :
      \ coc#refresh()

let g:coc_snippet_next = '<tab>'

" Create default mappings
let g:NERDCreateDefaultMappings = 1

" Add spaces after comment delimiters by default
let g:NERDSpaceDelims = 1

" Use compact syntax for prettified multi-line comments
let g:NERDCompactSexyComs = 1

" Align line-wise comment delimiters flush left instead of following code indentation
let g:NERDDefaultAlign = 'left'

" Allow commenting and inverting empty lines (useful when commenting a region)
let g:NERDCommentEmptyLines = 1

" Enable trimming of trailing whitespace when uncommenting
let g:NERDTrimTrailingWhitespace = 1

" Enable NERDCommenterToggle to check all selected lines is commented or not 
let g:NERDToggleCheckAllLines = 1

"source /home/twistingcamel/programs/themes/neovim/vim-afterglow/colors/afterglow.vim
colorscheme afterglow

set formatoptions-=cro
set nomousehide
set number
